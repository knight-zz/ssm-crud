<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd ">

    <!-- spring配置文件，主要配置和业务逻辑有关的,核心点为数据源、与mybatis的整合、事务控制 -->

    <!-- 1.开启组件扫描 -->
    <context:component-scan base-package="com.hh.ssm">
        <!-- 不扫描控制器 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--================================= 2.配置数据库源 ===================================-->
    <!-- 引入数据库配置文件 -->
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <!-- 配置德鲁伊数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--====================== 3 与mybatis的整合 =================================-->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定mybatis全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定mapper文件的位置 -->
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
    </bean>

    <!-- 配置扫描器，将mybatis接口的实现加入到IOC容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描包dao下所有DAO接口的实现，加入到IOC容器中 -->
        <property name="basePackage" value="com.hh.ssm.dao"/>
    </bean>

    <!-- 配置一个可以执行批量sql语句的sqlSession,执行单条可以不用配置 -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!--=================================== 4 事务控制 =================================================-->
    <!-- 创建事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据源，就是数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 基于xml方式配置事务（比较主要的事务都用配置式） -->
    <aop:config>
        <!-- 配置切入点:service包下的所有方法都可以切入事务 -->
        <aop:pointcut id="txPoint" expression="execution(* com.hh.ssm.service..*(..))"/>
        <!-- 配置事务增强 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!-- 配置事务通知，事务如何切入 -->
    <!-- transaction-manager指定事务控制器，默认值为transactionManager-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 在符合name属性值的方法上面添加事务
                 * 代表所有方法
                 get* 代表以get开始的所有方法
                 xxxx 代表名为xxxx的方法
             -->
            <tx:method name="*"/>
            <!-- 以get开头的方法一般都为查询方法，加上read-only可以优化查询 -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
</beans>